#!/usr/bin/env python3

# stdlib
import functools
import sys
import argparse

# 3rd-party
import cv2
import cv_bridge
import rospy

from sensor_msgs.msg import Image

# local packages
from atom_calibration.collect.label_messages import labelDepthMsg
from atom_core.ros_utils import filterLaunchArguments
from atom_core.config_io import loadConfig
from atom_calibration.initial_estimate.sensor import Sensor

import rospy
from std_msgs.msg import String

bridge = cv_bridge.CvBridge()


# result_image = None
# filled_image = None
# received_image = False
# cv2.namedWindow('result_image', cv2.WINDOW_NORMAL)
# cv2.namedWindow('filled_image', cv2.WINDOW_NORMAL)


def callbackMessageReceived(msg, seed):
    rospy.loginfo('Received depth message')

    stamp = rospy.Time.now()
    rospy.loginfo('Starting to label ...')

    # seed_x, seed_y = 800, 220
    # TODO add one seed point as dict for consistency
    labels, result_image, new_seed_point = labelDepthMsg(msg, seed=seed, bridge=bridge,
                                                         pyrdown=0, scatter_seed=True, scatter_seed_radius=36,
                                                         debug=True,
                                                         subsample_solid_points=6, limit_sample_step=3)
    rospy.loginfo('Labelling ended in ' + str((rospy.Time.now() - stamp).to_sec()))

    seed['x'] = new_seed_point['x']
    seed['y'] = new_seed_point['y']

    # cv2.namedWindow('labeled image', cv2.WINDOW_NORMAL)
    # cv2.imshow('labeled image', result_image)
    # cv2.waitKey(0)


def main():
    rospy.init_node('test_label_depth_msg', anonymous=False)

    # seed = {'x':300, 'y':200}
    # seed = {'x': 510, 'y': 180}
    seed = {'x': 600, 'y': 195}

    rospy.Subscriber('depth_image_topic', Image, functools.partial(callbackMessageReceived, seed=seed), queue_size=1)

    rospy.spin()


if __name__ == '__main__':
    main()
