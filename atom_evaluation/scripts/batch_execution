#!/usr/bin/env python3
"""
Runs several calibration executions in batch_execution. A yml file is used to config the batch executions.
"""
import argparse
import os
import subprocess
import yaml
import jinja2

from colorama import Fore, Back, Style
from pytictoc import TicToc

def main():
    ap = argparse.ArgumentParser()  # Parse command line arguments
    ap.add_argument("-v", "--verbose", help="Prints the output of each command to the terminal.", action='store_true',
                    default=False)
    ap.add_argument("-f", "--filename", help="Yml file containing a description of all the commands to run in batch.",
                    required=True, type=str)

    args = vars(ap.parse_args())

    # Load and render config file
    print('reading file ' + args['filename'])

    # Getting data map
    with open(args['filename']) as f:
        dataMap = yaml.safe_load(f)

    # Getting initial template
    with open(args['filename']) as f:
        template = f.read()

    # Recursive substitution of variables to allow nested
    while True:
        previous_template = template
        template = jinja2.Template(template).render(**dataMap)
        if previous_template == template:
            break

    config = yaml.safe_load(template)

    print(Fore.BLUE + Back.YELLOW + 'Loaded config file ' + args['filename'] + ' (rendered with nested variable substitution)' + Style.RESET_ALL)
    if args['verbose']:
        print(config)

    tictoc = TicToc()

    if not os.path.exists(config['output_folder']):  # create output folder if it does not exist.
        print(Fore.BLUE + Back.YELLOW + 'Creating output folder at: ' + config['output_folder'] + Style.RESET_ALL)
        os.mkdir(config['output_folder'])  # Create the new folder

    for idx, batch in enumerate(config['batches']):  # cyce through commands in batch_execution.
        print('\n\n' + Style.BRIGHT + Fore.BLUE + Back.YELLOW + 'Batch' + str(idx) + ', executing command:' +
              Style.RESET_ALL + '\n' + Fore.BLUE + Back.YELLOW + batch['cmd'] + Style.RESET_ALL)

        # Start executing command.
        tictoc.tic()
        proc = subprocess.Popen(batch['cmd'], shell=True, universal_newlines=True, stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
        proc.wait()  # wait for command to finish
        toc = str(round(tictoc.tocvalue(), 5))

        if not proc.returncode == 0:  # Check output of command.
            print(Fore.RED + Back.YELLOW + 'Error running command. stderr is:' + Style.RESET_ALL)
            print(proc.stderr.read())
            exit(0)

        output = proc.stdout.read()  # save sdtout to file
        if args['verbose']:
            print(Fore.BLUE + Back.YELLOW + 'Batch' + str(idx) + ' terminated, stdout is:' + Style.RESET_ALL)
            print(output)

        prefix = str(idx).zfill(2) + '_'
        filename = config['output_folder'] + '/' + prefix + batch['name'] + '_stdout.txt'
        with open(filename, 'w') as f:
            f.write(output)

        # Collect output files
        for file in batch['files_to_collect']:
            if not os.path.exists(file):
                raise ValueError('File ' + file + ' should be collected but does not exist.')

            filename_out = config['output_folder'] + '/' + prefix + batch['name'] + '_' + os.path.basename(file)
            print(Fore.BLUE + Back.YELLOW + 'Moving file ' + file + ' to ' + filename_out + Style.RESET_ALL)
            p = subprocess.Popen('cp ' + file + ' ' + filename_out, shell=True, universal_newlines=True,
                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait()

        print(Fore.BLUE + Back.YELLOW + 'Command executed in ' + toc + ' secs.' + Style.RESET_ALL)


if __name__ == "__main__":
    main()
