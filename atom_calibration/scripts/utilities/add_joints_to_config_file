#!/usr/bin/env python3

# stdlib
import os
from os.path import exists
import argparse

from atom_core.utilities import atomError


# 3rd-party
import rospkg
from colorama import Style, Fore
from atom_core.system import execute, loadYMLConfig

# local packages

if __name__ == "__main__":
    # Parse command line arguments
    ap = argparse.ArgumentParser()
    ap.add_argument("-pn", "--package_name", help='calibration package_name', type=str, required=True)
    ap.add_argument("-cfg", "--config_file", help='Specify if you want to configure the calibration package with a specific configuration file. If this flag is not given, the standard config.yml ill be used.',
                    type=str, required=False, default=None)
    args = vars(ap.parse_args())

    package_name = args['package_name']

    rospack = rospkg.RosPack()
    all_packages = rospack.list()
    if not package_name in all_packages:
        atomError('Could not find package ' + package_name + ' . Did you misspell the name?')

    package_path = rospack.get_path(package_name)  # full path to the package, including its name.
    package_base_path = os.path.dirname(package_path)  # parent path where the package is located

    # --------------------------------------------------------------------------
    # Read the config.yml file
    # --------------------------------------------------------------------------
    if args['config_file'] is None:
        args['config_file'] = package_path + '/calibration/config.yml'
    else:
        args['config_file'] = package_path + '/calibration/' + args['config_file']
        if not exists(args['config_file']):
            args['config_file'] = package_path + '/calibration/config.yml'

    print('Loading config_file ' + Fore.BLUE + str(args['config_file']) + Style.RESET_ALL)

    existing_config = loadYMLConfig(args['config_file'])
    if existing_config is None:
        atomError(Fore.RED + 'Your config file ' + args['config_file'] +
                  ' could not be read. Aborting.' + Fore.RESET)

    # --------------------------------------
    # Produce a new config.yml
    # --------------------------------------

    if not 'joints' in existing_config:

        import os
        import fileinput

        old = "# The calibration requires a detectable pattern."
        new = '# ATOM can also calibrate several parameters of your joints.\n' +\
              '# In this section you should discriminate the joints that will be part of the calibrations.\n' +\
              '# For each joint you must specify which parameters to optimize.\n' +\
              '# The joint is identified not by its name, but by the parent and child links.\n' +\
              '# NOTE: Delete the "" after joints if you add a joint.\n' +\
              'joints: ""\n' +\
              '  # Each key will define a joint and its name, which will be use throughout the calibration.\n' +\
              '  # Each joint definition must have the following properties:\n' +\
              '  #\n' +\
              '  #       parent_link:\n' +\
              '  #           The parent link of the joint to be calibrated.\n' +\
              '  #\n' +\
              '  #       child_link:\n' +\
              '  #           This child link of the joint to be calibrated.\n' +\
              '  #\n' +\
              '  #       params_to_calibrate:\n' +\
              '  #           This is the list of parameters that will be optimized, from the urdf definition (http://wiki.ros.org/urdf/XML/joint):\n' +\
              '  #           ["origin_x", "origin_y", "origin_z", "origin_roll", "origin_pitch", "origin_yaw", "position_bias"]\n' +\
              '  #\n' +\
              '  # EXAMPLE:\n' +\
              '  #head_pan_joint:\n' +\
              '  #  parent_link: "torso_lift_link"\n' +\
              '  #  child_link: "head_pan_link"\n' +\
              '  #  params_to_calibrate: ["position_bias"]\n\n' +\
              '# The calibration requires a detectable pattern.\n'

        execute('cp ' + args['config_file'] + ' /tmp/config.yml.bak')

        backup_file = '/tmp/config.yml.bak'
        file_handle_read = open(backup_file, "r")
        file_handle_write = open(args['config_file'], "w")

        for line in file_handle_read.readlines():

            if old in line:
                file_handle_write.write(new)
            else:
                file_handle_write.write(line)

        file_handle_read.close()
        file_handle_write.close()

        # Print final report
        print('\n\nUpdated ' + Fore.BLUE + args['config_file'] + Style.RESET_ALL +
              ' in ' + package_path +
              '\nSaved a backup of the previous file to ' + backup_file +
              '.\nYou should now run a new package configuration with:\n' +
              Fore.BLUE + 'rosrun ' + package_name + ' configure' + Style.RESET_ALL)

    else:
        atomError('joints field already exists in ' + Fore.BLUE + args['config_file'] +
                  Style.RESET_ALL + '. Nothing to do.')
