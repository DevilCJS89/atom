{
    /* Specify all sensors that are used in the calibration: Each sensor should have:
        <sensor_name>: {"link": <The frame of the sensor's data. The value of the sensor's message.header.frame_id.>,
                        "parent_link": <Parent frame of the transformation to be calibrated.>,
                        "child_link" : <Child frame of the transformation to be calibrated.>,
                        "topic_name" : <Name of the ros message topic that contains this sensor's data.>
        }
    */
    "sensors": {
        "right_camera": {
            "link": "zed_right_camera_optical_frame",
            "parent_link": "zed_camera_center",
            "child_link" : "zed_right_camera_frame",
            "topic_name" : "/zed/zed_node/right/image"
        },

        "left_camera": {
            "link": "zed_left_camera_optical_frame",
            "parent_link": "zed_camera_center",
            "child_link" : "zed_left_camera_frame",
            "topic_name" : "/zed/zed_node/left/image"
        },

        "vlp16": {
           "link": "velodyne",
           "parent_link": "tower_link",
           "child_link": "vlp16_frame",
           "topic_name": "/velodyne_points"
        }
    },

    /* Parameterization of the calibration pattern.
       @Eurico, can you add here a description for each field?
    */

    "calibration_pattern" : {
        "link": "chessboard_link",
        "parent_link": "base_link",
        "origin": [-0.37, 0.0, 0.0, 0, 0.0, 3.8],
        "fixed": false,
        "pattern_type": "charuco",
        "dictionary": "DICT_4X4_50",
        "border_size": 0.12,
        "dimension": {"x": 10, "y": 7},
        "size": 0.029,
        "inner_size": 0.024
    },

    /* Miscellaneous information */
    "anchored_sensor": "right_camera",     // Anchor a given sensor, making it immovable during the optimization.
    "world_link": "base_link",             // Frame of reference for the optimization procedure. Must exist in the
                                           //transformation chains of all the sensors which are being calibrated.
    "max_duration_between_msgs": 10000000  // Max time delta between sensor data messages when creating a collection.
}
