#!/usr/bin/env python3

# System and standar imports
import argparse
import os
import os.path
import sys
from functools import partial

# ros imports
import rospy
from geometry_msgs.msg import PointStamped
from sensor_msgs.msg import PointCloud2

# 3rd-party imports
from colorama import Back, Fore, Style
from pynput import keyboard

# own packages
from OptimizationUtils import OptimizationUtils

# Atom imports
from atom_calibration.dataset_playback.depth_manual_labeling import clickedPointsCallback, clickedPointsReset
from atom_calibration.dataset_playback.lidar3d_manual_labeling import *
from atom_calibration.dataset_playback.visualization import setupVisualization, visualizationFunction
from atom_core.dataset_io import (filterCollectionsFromDataset, filterSensorsFromDataset, loadResultsJSON,
                                  saveResultsJSON)
from atom_calibration.calibration.patterns_config import createPatternLabels

# global variables  ... are forbidden

# -------------------------------------------------------------------------------
# --- FUNCTIONS
# -------------------------------------------------------------------------------


def printHelp():

    s = 'Drag with the left button to select objects in the 3D scene.\n' \
        ' Hold the Alt key to change viewpoint as in the Move tool.'\
        ' Holding the Shift key will allow adding to the current selection.\n'\
        ' Holding the Ctrl key will allow subtraction from the current selection.\n'\
        ' The following keys are also available:\n'\
        ' p - Publish selected points to /rviz_selected_points\n'\
        ' b - Publish selected points to /rviz_selected_border_points\n'\
        ' r - Publish selected points to /rviz_selected_remove_points\n'\
        ' c - Publish selected points to /rviz_selected_clear_all_points\n'

    print(s)


def keyPressedCallback(key, selection, dataset, args):
    # Shortcut variables
    idx_collection = int(selection['collection_key'])
    idx_max_collection = len(dataset['collections'].keys()) - 1

    output_file = '/'.join(args['json_file'].split('/')[:-1]) + '/dataset_corrected.json'

    # Convert from type to string to keep uniform.
    key = str(key)
    if key == 'Key.right':  # Save and move to collection + 1.
        if idx_collection < idx_max_collection:
            selection['previous_collection_key'] = selection['collection_key']
            selection['collection_key'] = str(idx_collection + 1)
            print('Changed selected_collection_key to ' +
                  selection['collection_key'])
            saveResultsJSON(output_file, dataset, freeze_dataset=True)
        else:
            print(Fore.RED + 'This is the last collection!!' + Fore.RESET)
    elif key == 'Key.left':  # Save and move to collection - 1.
        if idx_collection > 0:
            selection['previous_collection_key'] = selection['collection_key']
            selection['collection_key'] = str(idx_collection - 1)
            print('Changed selected_collection_key to ' +
                  selection['collection_key'])
            saveResultsJSON(output_file, dataset, freeze_dataset=True)
        else:
            print(Fore.RED + 'This is the first collection!!' + Fore.RESET)
    elif key == "'s'":  # Saves dataset.
        saveResultsJSON(output_file, dataset, freeze_dataset=True)
        print('A new dataset was saved in ' + output_file)
    elif key == "'q'":  # Saves dataset and quits.
        saveResultsJSON(output_file, dataset, freeze_dataset=True)
        print('A new dataset was saved in ' + output_file)

        print('Exiting ...')
        selection['exit'] = True


# -------------------------------------------------------------------------------
# --- MAIN
# -------------------------------------------------------------------------------
def main():
    ap = argparse.ArgumentParser()
    ap = OptimizationUtils.addArguments(ap)  # OptimizationUtils arguments
    ap.add_argument("-json", "--json_file",
                    help="Json file containing input dataset.", type=str, required=True)
    ap.add_argument("-v", "--verbose", help="Be verbose",
                    action='store_true', default=False)
    ap.add_argument("-rv", "--ros_visualization",
                    help="Publish ros visualization markers.", action='store_true')
    ap.add_argument("-si", "--show_images", help="shows images for each camera",
                    action='store_true', default=False)
    ap.add_argument("-ajf", "--all_joints_fixed",
                    help="Assume all joints are fixed and because of that draw a single robot mesh. Overrides "
                         "automatic detection of static robot.",
                    action='store_true', default=False)
    ap.add_argument("-uic", "--use_incomplete_collections",
                    help="Remove any collection which does not have a detection for all sensors.",
                    action='store_true', default=False)
    ap.add_argument("-rpd", "--remove_partial_detections",
                    help="Remove detected labels which are only partial. Used or the Charuco.",
                    action='store_true', default=False)
    ap.add_argument("-ssf", "--sensor_selection_function", default=None, type=lambda s: eval(s, globals()),
                    help='A string to be evaluated into a lambda function that receives a sensor name as input and '
                         'returns True or False to indicate if the sensor should be loaded (and used in the '
                         'optimization). The Syntax is lambda name: f(x), where f(x) is the function in python '
                         'language. Example: lambda name: name in ["left_laser", "frontal_camera"] , to load only '
                         'sensors left_laser and frontal_camera')
    ap.add_argument("-csf", "--collection_selection_function", default=None, type=lambda s: eval(s, globals()),
                    help='A string to be evaluated into a lambda function that receives a collection name as input and '
                         'returns True or False to indicate if the collection should be loaded (and used in the '
                         'optimization). The Syntax is lambda name: f(x), where f(x) is the function in python '
                         'language. Example: lambda name: int(name) > 5 , to load only collections 6, 7, and onward.')
    ap.add_argument('-oj', '--output_json', help='Full path to output json file.', type=str, required=False,
                    default=None)
    ap.add_argument("-ow", "--overwrite",
                    help="Overwrites the data_corrected.json without asking for permission.", action='store_true')

    # Roslaunch adds two arguments (__name and __log) that break our parser. Lets remove those.
    arglist = [x for x in sys.argv[1:] if not x.startswith('__')]
    args = vars(ap.parse_args(args=arglist))

    # ---------------------------------------
    # --- INITIALIZATION Read data from file
    # ---------------------------------------
    # Loads a json file containing the detections. Returned json_file has path resolved by urireader.
    dataset, json_file = loadResultsJSON(args['json_file'],
                                         args['collection_selection_function'])

    # ---------------------------------------
    # --- Filter some collections and / or sensors from the dataset
    # ---------------------------------------
    dataset = filterCollectionsFromDataset(dataset, args)  # filter collections
    output_file = '/'.join(args['json_file'].split('/')[:-1]) + '/dataset_corrected.json'
    if os.path.exists(output_file) and args['json_file'] != output_file and not args['overwrite']:
        ans = input('The file dataset_corrected.json already exists.'
                    ' Do you want to overwrite? (Y/n)')
        if ans.lower() == 'n':
            sys.exit(0)

    # Create the chessboard dataset must be called before deleting the sensors to cope with the possibility of
    # setting up an optimization without cameras. For now we MUST have a camera to estimate the initial parameters
    # related to the pattern pose (we use solve PNP for a camera).
    # TODO: Solve this strange dependency.
    dataset['patterns'] = createPatternLabels(args, dataset)

    dataset = filterSensorsFromDataset(dataset, args)  # filter sensors

    print('Loaded dataset containing ' + str(len(dataset['sensors'].keys())) + ' sensors and ' + str(
        len(dataset['collections'].keys())) + ' collections.')

    # ---------------------------------------
    # --- Define selection
    # ---------------------------------------
    # Lets start with the first key on the collections dictionary.
    # Data structure used to save the state of navigation throughout the collections in the dataset.
    selection = {'collection_key': list(dataset['collections'].keys())[0], 'previous_collection_key': None,
                 'exit': False}

    print("Configuring visualization ... ")
    graphics = setupVisualization(dataset, args, selection['collection_key'])

    # ---------------------------------------
    # --- lidar3d modality subscribers
    # ---------------------------------------

    # Define subscriber to receive the selected points
    rospy.Subscriber("/rviz_selected_points", PointCloud2, partial(
        selectedPointsCallback, selection=selection, dataset=dataset), queue_size=1, buff_size=52428800)

    rospy.Subscriber("/rviz_selected_border_points", PointCloud2,
                     partial(selectedPointsBorderCallback, selection=selection, dataset=dataset),
                     queue_size=1)

    rospy.Subscriber("/rviz_selected_remove_points", PointCloud2,
                     partial(selectedPointsRemoveCallback, selection=selection, dataset=dataset),
                     queue_size=1)

    rospy.Subscriber("/rviz_selected_clear_all_points", PointCloud2,
                     partial(selectedPointsClearAllCallback, selection=selection, dataset=dataset),
                     queue_size=1)

    # ---------------------------------------
    # --- Depth modality subscribers
    # ---------------------------------------

    # Subscriber for the image_click plugin
    # this stores the pixel coordinates of clicked points per collection, and per sensor key
    clicked_points = {collection_key: {} for collection_key in dataset['collections']}

    # Initialize clicked points for all collections and sensors
    for collection_key in dataset['collections']:
        for sensor_key, sensor in dataset['sensors'].items():
            if sensor['modality'] == 'depth':
                clickedPointsReset(clicked_points, collection_key, sensor_key)

    # Create a subscriber for each depth sensor
    for sensor_key, sensor in dataset['sensors'].items():
        if sensor['modality'] == 'depth':
            points_topic = dataset['sensors'][sensor_key]['topic'] + \
                '/labeled/mouse_click'
            rospy.Subscriber(points_topic, PointStamped,
                             partial(clickedPointsCallback, clicked_points=clicked_points,
                                     dataset=dataset, sensor_key=sensor_key, selection=selection))

    # ---------------------------------------
    # --- RGB modality subscribers
    # ---------------------------------------
    # TODO #394 To implement in the future.

    # ---------------------------------------
    # --- Define callback to navigate through collections
    # ---------------------------------------
    listener = keyboard.Listener(on_press=partial(keyPressedCallback, selection=selection, dataset=dataset, args=args))
    listener.start()

    # ---------------------------------------
    # --- Loop while displaying selected collection
    # ---------------------------------------
    rate = rospy.Rate(30)  # in hertz.
    tic = rospy.Time.now()
    while not rospy.is_shutdown() and not selection['exit']:
        models = {'dataset': dataset, 'args': args, 'graphics': graphics}
        visualizationFunction(models=models, selection=selection, clicked_points=clicked_points)
        rate.sleep()

        if (rospy.Time.now() - tic).to_sec() > 3:
            printHelp()
            tic = rospy.Time.now()


if __name__ == "__main__":
    main()
