#!/usr/bin/env python

# ------------------------
#    IMPORT MODULES      #
# ------------------------
import argparse
import os
import rospkg
import subprocess
from colorama import Style, Fore
from datetime import datetime
from interactive_calibration.utilities import execute, resolvePath

import rospy

if __name__ == "__main__":
    # Parse command line arguments
    ap = argparse.ArgumentParser()
    ap.add_argument("-n", "--name", help='package_name', type=str, required=True)
    args = vars(ap.parse_args())

    # Initial setup
    package_path_name = resolvePath(args['name'])  # full path to the package, e.g. /home
    package_name = os.path.basename(package_path_name)
    package_path = os.path.dirname(package_path_name)
    rospack = rospkg.RosPack()
    interactive_calibration_path = rospack.get_path('interactive_calibration')

    # Check if folder exists, abort if so
    assert (not os.path.exists(package_path_name)), Fore.RED + 'Folder ' + package_path_name + \
                                                    ' already exists. Remove or try a different name for your package.'

    # Check is a package with the same name exists under ROS, abort if so
    assert (package_name not in rospack.list()), Fore.RED + 'A ROS package with the same name (' + package_name + \
                                                 ') already exists under your $ROS_PACKAGE_PATH. Try a different ' \
                                                 'name for your package.' + Style.RESET_ALL
    # Create package
    print('Creating package ' + package_name + ' on path ' + package_path + ' please wait ...')
    cmd = 'cd ' + package_path + ' && catkin_create_pkg ' + package_name + ' rospy ' + \
          '-a "Auto generated by Atomic Framework" ' + \
          '-D "Calibration package created automatically by the create_calibration_pkg.py ' \
          'script. Check the ATOMIC framework webpage for more information."'
    execute(cmd, verbose=True)

    # Augment package structure (e.g. create folders, etc)
    execute('mkdir ' + package_path_name + '/calibration')
    execute('mkdir ' + package_path_name + '/launch')
    execute('mkdir ' + package_path_name + '/rviz')
    execute('mkdir ' + package_path_name + '/urdf')
    execute('mkdir ' + package_path_name + '/scripts')

    # Add configure.py script
    configure_file = package_path_name + '/scripts/configure'
    with open(configure_file, 'w') as f:
        f.write('#!/bin/sh')  # shebang
        f.write('\n# Auto generated on ' + datetime.now().strftime("%d/%m/%Y %H:%M:%S"))
        f.write('\n#      ATOMIC Framework')
        f.write('\nrosrun interactive_calibration configure_calibration_pkg.py -n ' + package_name)
        f.close()
    execute('chmod +x ' + configure_file)  # make file executable

    # Add template config.json
    config_file_src = interactive_calibration_path + '/templates/config.yml'
    config_file_dst = package_path_name + '/calibration/config.yml'
    cmd = 'cp ' + config_file_src + ' ' + config_file_dst
    execute(cmd)

    # Check if package is under $ROS_PACKAGE_PATH
    execute('rospack profile && rospack profile && rospack profile', verbose=False)
    if package_name in rospack.list():
        print(Fore.YELLOW + 'Package ' + package_name +
              'not found under ROS. Are you sure the path you gave in under your $ROS_PACKAGE_PATH? Calibration '
              'package will not work if it is not under the $ROS_PACKAGE_PATH. Please fix this before running the '
              'package configuration. ' + Style.RESET_ALL)

    # Print final report
    print('\n\nCreated calibration package ' + package_name + ' in ' + package_path + '. Now you should:')
    print(Fore.BLUE + '   1. Edit the ' + config_file_dst + ' to setup the calibration and; \n   2. Run:' + Fore.RED +
          ' rosrun ' + package_name + ' configure' + Style.RESET_ALL)
